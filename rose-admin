#!/usr/bin/env python3

import sys
import os
import logging
import requests
import re

log = logging.getLogger('admin')

class Client(object):

    def __init__(self, args):
        self.args = args
        self.server_url = None

    def run(self):
        logging.basicConfig(level=logging.INFO)
        if len(self.args) < 2:
            self.usage('server-URL required')

        self.server_url = self.args[1]
        if not self.is_valid_url(self.server_url):
            self.usage('Invalid server URL format. Expected format: http://host:port')

        if len(self.args) < 3:
            self.usage('Verb required')

        verb = self.args[2]
        method_name = 'do_' + verb.replace('-', '_')
        try:
            method = getattr(self, method_name)
        except AttributeError:
            self.usage('Unknown verb: %r' % verb)
        try:
            method()
        except Exception as e:
            log.error("Error running: %s, %s", verb, e)
            sys.exit(1)

    def is_valid_url(self, url):
        pattern = re.compile(r'http://\S+:\d+')
        return bool(pattern.match(url))

    def do_start(self):
        """start"""
        response = requests.post(f"{self.server_url}/admin?running=1")
        print(response.text)

    def do_stop(self):
        """stop"""
        response = requests.post(f"{self.server_url}/admin?running=0")
        print(response.text)

    def do_reset(self):
        """reset"""
        response = requests.post(f"{self.server_url}/admin?reset=1")
        print(response.text)

    def do_set_rate(self):
        """set-rate RATE"""
        if len(self.args) < 4:
            self.usage("RATE required")
        rate = float(self.args[3])
        if rate not in [1, 2, 5, 10]:
            self.usage("Invalid rate value. Rate can only be 1, 2, 5, or 10.")
        response = requests.post(f"{self.server_url}/admin?rate={rate}")
        print(response.text)

    def do_set_drivers(self):
        """set-drivers DRIVER1 [DRIVER2]"""
        
        if len(self.args) < 4:
            self.usage("At least one DRIVER URL is required")
        
        driver1 = self.args[3]
        if not self.is_valid_url(driver1):
            self.usage("Invalid DRIVER1 URL format. Expected format: http://host:port")
        
        if len(self.args) >= 5:
            driver2 = self.args[4]
            if not self.is_valid_url(driver2):
                self.usage("Invalid DRIVER2 URL format. Expected format: http://host:port")
            drivers = f"{driver1},{driver2}"
        else:
            drivers = driver1

        response = requests.post(f"{self.server_url}/admin?drivers={drivers}")
        print(response.text)

    def commands(self):
        return sorted(getattr(self, name).__doc__
                      for name in dir(self)
                      if name.startswith('do_'))

    def usage(self, msg=None):
        if msg:
            log.info(msg)
        basename = os.path.basename(self.args[0])
        commands = '|'.join(self.commands())
        log.info('Usage: %s <server-URL> [%s]', basename, commands)
        sys.exit(2)

if __name__ == '__main__':
    Client(sys.argv).run()
